// Mocks generated by Mockito 5.4.4 from annotations
// in group_escape/test/trip_details_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:group_escape/models/trip_model.dart' as _i5;
import 'package:group_escape/services/firestore_service.dart' as _i3;
import 'package:group_escape/shared/firebase_authentication.dart' as _i8;
import 'package:group_escape/util/availability.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocumentSnapshot_0<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_1<T1 extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T1> {
  _FakeDocumentReference_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_2 extends _i1.SmartFake
    implements _i2.SnapshotMetadata {
  _FakeSnapshotMetadata_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i3.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> subscribeToTopic(dynamic tripId) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [tripId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> sendNotification({required String? topic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [],
          {#topic: topic},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String> addTrip(_i5.TripModel? trip) => (super.noSuchMethod(
        Invocation.method(
          #addTrip,
          [trip],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #addTrip,
            [trip],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> addAvailability(
    String? tripId,
    _i7.Availability? availability,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAvailability,
          [
            tripId,
            availability,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTrip(
    String? tripId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTrip,
          [
            tripId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> checkIfExists(String? tripId) => (super.noSuchMethod(
        Invocation.method(
          #checkIfExists,
          [tripId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> addUserToTrip(
    String? tripId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToTrip,
          [
            tripId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> getUserName(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserName,
          [userId],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getUserName,
            [userId],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Stream<List<Map<String, dynamic>>> getTripsStream(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTripsStream,
          [userId],
        ),
        returnValue: _i4.Stream<List<Map<String, dynamic>>>.empty(),
      ) as _i4.Stream<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> addLocationToTrip(
    String? tripId,
    String? location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLocationToTrip,
          [
            tripId,
            location,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> voteForLocation(
    String? tripId,
    String? location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #voteForLocation,
          [
            tripId,
            location,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> endLocationVoting(String? tripId) => (super.noSuchMethod(
        Invocation.method(
          #endLocationVoting,
          [tripId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> getFinalLocation(String? tripId) => (super.noSuchMethod(
        Invocation.method(
          #getFinalLocation,
          [tripId],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getFinalLocation,
            [tripId],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getTripDetails(String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTripDetails,
          [tripId],
        ),
        returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
            _FakeDocumentSnapshot_0<Object?>(
          this,
          Invocation.method(
            #getTripDetails,
            [tripId],
          ),
        )),
      ) as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Object?>> getTripStream(String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTripStream,
          [tripId],
        ),
        returnValue: _i4.Stream<_i2.DocumentSnapshot<Object?>>.empty(),
      ) as _i4.Stream<_i2.DocumentSnapshot<Object?>>);
}

/// A class which mocks [FirebaseAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthentication extends _i1.Mock
    implements _i8.FirebaseAuthentication {
  MockFirebaseAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String currentUser() => (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #currentUser,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.Future<String?> createUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i2.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i2.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_1<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i2.DocumentReference<T>);

  @override
  _i2.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_2(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i2.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}
